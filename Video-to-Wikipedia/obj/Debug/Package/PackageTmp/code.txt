using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Web;
using System.Web.Mvc;
using Video_to_Wikipedia.Properties;
using FlickrNet;

//todo refactor refactor refactor
//todo  move magic strings to resources (create resource class if necesssary
//todo  move stuff out to helper methods

namespace Video_to_Wikipedia.Controllers
{

    [HandleError]
    public class HomeController : Controller
    {

        
        public ViewResult Index()
        {
            ViewData["key"] = Server.MapPath(".\\") + "ffmpeg2theora.exe" + "\r\n<br\\>";
            
            flickr();
            return View();
        }

        private void flickr()
        {

            string url = @"http://www.flickr.com/photos/42917230@N08/4076444545/";
            //   Flickr flickr = new Flickr(Configuration.FlickrKey, Configuration.FlickrSecret);

            //   var places = flickr.PlacesGetInfoByUrl(url);
            //   ViewData["key"] = places.Description;


            /*    
                //DownloadPhotos(Flickr flickr, ref ArrayList photosetIds, int totalPhotos)
                foreach (Photo photo in flickr.PhotosetsGetPhotos(id, pageNumber, PublicVariables.photosPerPage).PhotoCollection)
                {
                    string photoTitle = photo.Title;

                    if (File.Exists(Path.Combine(downloadDirectory, photoTitle + ".jpg")))
                    {
                        string originalTitle = photoTitle;
                        int renameSeries = 1;

                        while (File.Exists(Path.Combine(downloadDirectory, photoTitle + ".jpg")))
                        {
                            photoTitle = String.Format("{0} ({1})", originalTitle, renameSeries.ToString());
                            renameSeries += 1;
                        }
                    }
                    Debug.WriteLine(photoTitle);
                    SetLabelText(ref fileStatusLabel, String.Format("{0} of {1}", downloaded, totalPhotos));
                    Image downloadedImage = null;

                    switch (PublicVariables.photoDownloadSize)
                    {
                        case PublicVariables.PhotoSize.Small:
                            downloadedImage = Image.FromStream(flickr.DownloadPicture(photo.SmallUrl));
                            break;
                        case PublicVariables.PhotoSize.Medium:
                            downloadedImage = Image.FromStream(flickr.DownloadPicture(photo.MediumUrl));
                            break;
                        case PublicVariables.PhotoSize.Large:
                            downloadedImage = Image.FromStream(flickr.DownloadPicture(photo.LargeUrl));
                            break;
                        case PublicVariables.PhotoSize.Original:
                            downloadedImage = Image.FromStream(flickr.DownloadPicture(photo.OriginalUrl));
                            break;
                    }

                    downloadedImage.Save(Path.Combine(downloadDirectory, photoTitle + ".jpg"),
                                         System.Drawing.Imaging.ImageFormat.Jpeg);
                    SetPictureBoxImage(ref thumbnailPictureBox, downloadedImage, PictureBoxSizeMode.Zoom,
                                       downloadedImage.Size);
                    downloaded += 1;
                }

    */
        }

        #region 
        /*
            * private string GetSrcURL(string photoId)
  598         {
  599             string srcURL = "";
  600             Sizes sz = _fapi.PhotosGetSizes(photoId);
  601 
  602             if (GetSrcURLByLabel(ref srcURL, sz, "Original")) { return srcURL; }
  603             if (GetSrcURLByLabel(ref srcURL, sz, "Large")) { return srcURL; }
  604             if (GetSrcURLByLabel(ref srcURL, sz, "Medium")) { return srcURL; }
  605             if (GetSrcURLByLabel(ref srcURL, sz, "Small")) { return srcURL; }
  606 
  607             return "no url found"; // TODO: throw exception
  608         }
  609 
  610 
  611         public void DownloadPhotos (BackgroundWorker bgw)
  612         {
  613             Regex r = new Regex("-fd(?<1>\\d\\d\\d\\d)$", RegexOptions.Compiled);
  614             WebClient client = new WebClient ();
  615             {
  616                 int index = 0;
  617                 foreach (DLPhoto dlp in _curDLPhotos)
  618                 {
  619 					if (bgw.CancellationPending)
  620 					{
  621 						return;
  622 					}
  623 
  624                     // get the real info
  625                     PhotoInfo pi = _fapi.PhotosGetInfo(dlp.photo.PhotoId, dlp.photo.Secret);
  626 
  627                     string dstFolder = Path.Combine(_destFolder, Util.MakeFilenameSafe(dlp.photoSetName));
  628 
  629 					try
  630 					{
  631 						ConfirmOrMakeFolder(dstFolder);
  632 					}
  633 					catch (Exception)
  634 					{
  635 						dstFolder = Path.Combine(_destFolder, Util.MakeFilenameSuperSafe(dlp.photoSetName));
  636 					}
  637 
  638 ////                  string src  = "http://photos" + dlp.photo.Server + ".flickr.com/" + dlp.photo.PhotoId + "_" + dlp.photo.Secret + "_o.jpg";
  639 ////                  string src  = dlp.photo.OriginalUrl;
  640 //                    string src = "http://static.flickr.com/" + dlp.photo.Server + "/" + dlp.photo.PhotoId + "_" + dlp.photo.Secret + "_o." + origExt;
  641                     string origExt = "jpg";
  642                     if (pi.OriginalFormat != null && pi.OriginalFormat.Length > 0)
  643                     {
  644                         origExt = dlp.photo.OriginalFormat;
  645                     }
  646                     // string src = pi.OriginalUrl;
  647                     string src = GetSrcURL(dlp.photo.PhotoId);
  648                     string dst = Path.Combine(dstFolder, Util.MakeFilenameSafe(dlp.photo.Title));
  649                     string ext = "." + origExt;
  650                     if (Path.GetExtension(dst).ToLower().CompareTo(ext) != 0)
  651                     {
  652                         dst = dst + ext;
  653                     }
  654 
  655 					if (!File.Exists(dst))
  656 					{
  657 						// it doesn't exist therefore we don't know if this is a valid filename
  658 						try
  659 						{
  660 							// create creating the file then delete it
  661 							// if we are succesful there's not problem
  662 							StreamWriter sw = new StreamWriter(dst);
  663 							sw.Close();
  664 							File.Delete(dst);
  665 						}
  666 						catch (Exception)
  667 						{
  668 							// create a super safe name
  669 							dst = Path.Combine(dstFolder, Util.MakeFilenameSuperSafe(dlp.photo.Title));
  670 							if (Path.GetExtension(dst).ToLower().CompareTo(ext) != 0)
  671 							{
  672 								dst = dst + ext;
  673 							}
  674 						}
  675 					}
  676 
  677                     while (File.Exists(dst))
  678                     {
  679                         string dstPath = Path.GetDirectoryName(dst);
  680                         string dstName = Path.GetFileNameWithoutExtension(dst);
  681                         string dstExt  = Path.GetExtension(dst);
  682 
  683                         // either add the FlickrDown extension or increment it
  684                         Match m = r.Match(dstName);
  685                         if (m.Success)
  686                         {
  687                             // already have fd extension so increment it
  688                             string numStr = m.Groups[1].ToString();
  689                             int num = int.Parse(numStr);
  690                             dst = Path.Combine(dstPath, dstName.Substring(0, dstName.Length - 4) +
  691                                    String.Format("{0:d4}", num + 1) + dstExt);
  692                         }
  693                         else
  694                         {
  695                             dst = Path.Combine(dstPath, dstName + "-fd0000" + dstExt);
  696                         }
  697                     }
  698 
  699 					//{
  700                     //    StreamWriter sw = new StreamWriter(@"flickrdebuglog.txt", true);
  701                     //
  702 					//	sw.Write("(");
  703 					//	sw.Write(src);
  704 					//	sw.Write(")->(");
  705 					//	sw.Write(dst);
  706 					//	sw.Write(")\n");
  707 					//	sw.Close();
  708 					//}
  709 
  710                     client.DownloadFile(src, dst);
  711 
  712                     bgw.ReportProgress(0, index);
  713 
  714                     index++;
  715                 }
  716             }
  717             client.Dispose();
  718         }*/

        #endregion
        

        

        private void ffmpegProcess()
        {
            ProcessStartInfo processStartInfo = new ProcessStartInfo();

            string ffmpegLocation = Server.MapPath(".\\video-to-wikipedia\\") + "ffmpeg2theora.exe";
            processStartInfo.FileName = ffmpegLocation;
            

            processStartInfo.RedirectStandardOutput = true;
            processStartInfo.CreateNoWindow = true;
            processStartInfo.UseShellExecute = false;
            Process conversionProcess = Process.Start(processStartInfo);

            StreamReader sr;
            if (conversionProcess != null)
            {
                sr = conversionProcess.StandardOutput;
                FileInfo info = new FileInfo(Server.MapPath(".\\") + "newtext.txt");

                StreamWriter tw = info.CreateText();
                tw.WriteLine(sr.ReadToEnd());
                tw.Close();
            }
        }
     

        public IList<string> GetFilenamesFromPath(string filepath)
        {
            DirectoryInfo directory = new DirectoryInfo(filepath);
            FileInfo[] files = directory.GetFiles();
            IList<string> filenameStrings = new List<string>();
            foreach (FileInfo file in files)
            {
                filenameStrings.Add(file.Name);
            }

            return filenameStrings;
        }
    }
}
